{"version":3,"file":"progress-component.js","sourceRoot":"","sources":["src/progress-component.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property, state } from 'lit/decorators.js';\n\n@customElement('progress-component')\nexport class ProgressComponent extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      flex-direction: column;\n      border: solid 1px gray;\n      padding: 8px 10px;\n      max-width: 800px;\n      overflow: hidden;\n    }\n    .first-row {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      gap: 10px;\n    }\n    circle {\n      transition: stroke-dashoffset 0.35s;\n      transform: rotate(-90deg);\n      transform-origin: 50% 50%;\n    }\n    .message {\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      cursor: pointer;\n    }\n    .history {\n      display: flex;\n      flex-direction: column;\n\n      max-height: 0;\n      overflow: hidden;\n      transition: max-height 0.3s ease;\n      white-space: normal;\n      font-size: 0.8em;\n    }\n    .history div {\n      margin: 5px 0;\n    }\n    .history.expanded {\n      max-height: 500px; /* Limit expansion height, you can adjust this */\n    }\n  `;\n\n  @property({ type: Number })\n  progress = 0;\n\n  @property({ type: Number })\n  size = 100;\n\n  @property({ type: Number })\n  strokeWidth = 0;\n\n  @property({ type: String })\n  message = 'Idle status';\n\n  @property({ type: Boolean })\n  success = false;\n\n  @property({ type: Number })\n  count = 0;\n\n  @state()\n  private isExpanded = false;\n\n  @state()\n  private messageHistory: string[] = [];\n\n  // Calculate the strokeWidth, defaulting to 1/3 of the size if not provided\n  get calculatedStrokeWidth() {\n    const defaultStrokeWidth = this.size / 3;\n    return this.strokeWidth > 0\n      ? Math.min(this.strokeWidth, defaultStrokeWidth)\n      : defaultStrokeWidth;\n  }\n\n  override updated(changedProperties: Map<string | number | symbol, unknown>) {\n    if (changedProperties.has('message')) {\n      this.updateMessageHistory();\n    }\n  }\n\n  // Method to update the message history\n  private updateMessageHistory() {\n    // Add new message to the history\n    if (this.message) {\n      this.messageHistory = [\n        ...this.messageHistory.slice(-24), // Keep only the last 24 messages\n        this.message,\n      ];\n    }\n  }\n\n  // Toggle between expanded and collapsed states\n  private toggleExpand() {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  override render() {\n    const radius = (this.size / 2) - (this.calculatedStrokeWidth / 2);\n    const circumference = 2 * Math.PI * radius;\n    const progress = this.displayProgress(this.progress);\n    const offset = circumference * (1 - progress);\n\n    return html`\n    <div class=\"first-row\">\n      <div>\n        <svg\n          width=\"${this.size}px\"\n          height=\"${this.size}px\"\n          viewBox=\"0 0 ${this.size} ${this.size}\"\n        >\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#b9b9b9\"\n            stroke-width=\"${this.calculatedStrokeWidth}\"\n            fill=\"transparent\"\n          ></circle>\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#3f3f3f\"\n            stroke-width=\"${this.calculatedStrokeWidth}\"\n            fill=\"transparent\"\n            stroke-dasharray=\"${circumference}\"\n            stroke-dashoffset=\"${offset}\"\n          ></circle>\n        </svg>\n      </div>\n      <div class=\"message\" @click=\"${this.toggleExpand}\">\n        ${this.message}\n      </div>\n</div>\n      <div class=\"history ${this.isExpanded ? 'expanded' : ''}\">\n        ${this.messageHistory.map(\n          (msg) => html`<div>${msg}</div>`\n        )}\n      </div>\n    `;\n  }\n\n  private displayProgress(progress: number): number {\n    return Math.min(Math.max(progress, 0), 1);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'progress-component': ProgressComponent;\n  }\n}\n"]}
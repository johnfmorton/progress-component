{"version":3,"file":"progress-component.js","sourceRoot":"","sources":["src/progress-component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;;;;;;AAEH,OAAO,EAAC,UAAU,EAAE,IAAI,EAAE,GAAG,EAAC,MAAM,KAAK,CAAC;AAC1C,OAAO,EAAC,aAAa,EAAE,QAAQ,EAAC,MAAM,mBAAmB,CAAC;AAE1D;;;;;;GAMG;AAEI,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU;IAA1C;;QAmBL,aAAQ,GAAG,CAAC,CAAC;QAEb,4BAA4B;QAE5B,SAAI,GAAG,GAAG,CAAC;QAGX,YAAO,GAAG,aAAa,CAAC;QAGxB,YAAO,GAAG,KAAK,CAAC;QAEhB;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;IAiEZ,CAAC;IA/DU,MAAM;QACb,oEAAoE;QACpE,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,oDAAoD;QACxF,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,aAAa,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAA;;sBAEO,IAAI,CAAC,IAAI,eAAe,IAAI,CAAC,IAAI;;kBAErC,IAAI,CAAC,IAAI,GAAG,CAAC;kBACb,IAAI,CAAC,IAAI,GAAG,CAAC;iBACd,MAAM;;;;;;kBAML,IAAI,CAAC,IAAI,GAAG,CAAC;kBACb,IAAI,CAAC,IAAI,GAAG,CAAC;iBACd,MAAM;;;;gCAIS,aAAa;iCACZ,MAAM;;;;aAI1B,IAAI,CAAC,OAAO;KACpB,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,cAAc,CAAC,OAAgB;QAC7B,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,OAAO,KAAK,IAAI,EAAE,CAAC;YACrB,uBAAuB;YACvB,OAAO,GAAG,SAAS,CAAC;QACtB,CAAC;aAAM,CAAC;YACN,wBAAwB;YACxB,OAAO,GAAG,SAAS,CAAC;QAEtB,CAAC;QACD,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;;;OAIG;IACK,eAAe,CAAC,QAAgB;QACtC,yCAAyC;QACzC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;;AAhGe,wBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;GAe3B,AAfqB,CAepB;AAGF;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;mDACZ;AAIb;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;+CAChB;AAGX;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;kDACD;AAGxB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC;kDACV;AAMhB;IADC,QAAQ,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC;gDACf;AAnCC,iBAAiB;IAD7B,aAAa,CAAC,oBAAoB,CAAC;GACvB,iBAAiB,CAoG7B","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {LitElement, html, css} from 'lit';\nimport {customElement, property} from 'lit/decorators.js';\n\n/**\n * An example element.\n *\n * @fires count-changed - Indicates when the count changes\n * @slot - This element has a slot\n * @csspart button - The button\n */\n@customElement('progress-component')\nexport class ProgressComponent extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      border: solid 1px gray;\n      padding: 16px;\n      max-width: 800px;\n      gap: 10px;\n    }\n    circle {\n      transition: stroke-dashoffset 0.35s;\n      transform: rotate(-90deg);\n      transform-origin: 50% 50%;\n    }\n  `;\n\n  @property({type: Number})\n  progress = 0;\n\n  // Size of the SVG in pixels\n  @property({ type: Number })\n  size = 100;\n\n  @property({type: String})\n  message = 'Idle status';\n\n  @property({type: Boolean})\n  success = false;\n\n  /**\n   * The number of times the button has been clicked.\n   */\n  @property({type: Number})\n  count = 0;\n\n  override render() {\n    // Calculate radius based on the size, with padding for stroke width\n    const radius = (this.size / 2) - 4; // Subtract stroke width from size to fit within SVG\n    const circumference = 2 * Math.PI * radius;\n    const progress = this.displayProgress(this.progress);\n    const offset = circumference * (1 - progress);\n\n    return html`\n      <div>\n        <svg width=\"${this.size}px\" height=\"${this.size}px\">\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#b9b9b9\"\n            stroke-width=\"4\"\n            fill=\"transparent\"\n          ></circle>\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#3f3f3f\"\n            stroke-width=\"4\"\n            fill=\"transparent\"\n            stroke-dasharray=\"${circumference}\"\n            stroke-dashoffset=\"${offset}\"\n          ></circle>\n        </svg>\n      </div>\n      <div>${this.message}</div>\n    `;\n  }\n\n  /**\n   * Displays success or failure\n   * @param success The status of the operation\n   * @returns Success or Failure\n   */\n  displaySuccess(success: boolean) {\n    let display = '';\n    if (success === true) {\n      // this.success = true;\n      display = 'Success';\n    } else {\n      // this.success = false;\n      display = 'Failure';\n\n    }\n    return display;\n  }\n\n  /**\n   * Displays the progress\n   * @param progressValue The progress of the operation\n   * @returns The progress\n   */\n  private displayProgress(progress: number): number {\n    // Ensure the progress is between 0 and 1\n    return Math.min(Math.max(progress, 0), 1);\n  }\n\n\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'progress-component': ProgressComponent;\n  }\n}\n"]}
{"version":3,"file":"progress-component.js","sourceRoot":"","sources":["src/progress-component.ts"],"names":[],"mappings":";;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAGrD,IAAM,iBAAiB,GAAvB,MAAM,iBAAkB,SAAQ,UAAU;IAA1C;;QAyBL,aAAQ,GAAG,CAAC,CAAC;QAGb,SAAI,GAAG,GAAG,CAAC;QAGX,gBAAW,GAAG,CAAC,CAAC;QAGhB,YAAO,GAAG,aAAa,CAAC;QAGxB,YAAO,GAAG,KAAK,CAAC;QAGhB,UAAK,GAAG,CAAC,CAAC;IAsDZ,CAAC;IApDC,2EAA2E;IAC3E,IAAI,qBAAqB;QACvB,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,6BAA6B;QACvE,OAAO,IAAI,CAAC,WAAW,GAAG,CAAC;YACzB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,EAAE,kBAAkB,CAAC;YAChD,CAAC,CAAC,kBAAkB,CAAC;IACzB,CAAC;IAEQ,MAAM;QACb,MAAM,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAC,CAAC,CAAC,qDAAqD;QACxH,MAAM,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC;QAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,MAAM,MAAM,GAAG,aAAa,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAA;;;mBAGI,IAAI,CAAC,IAAI;oBACR,IAAI,CAAC,IAAI;yBACJ,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI;;;kBAG7B,IAAI,CAAC,IAAI,GAAG,CAAC;kBACb,IAAI,CAAC,IAAI,GAAG,CAAC;iBACd,MAAM;;4BAEK,IAAI,CAAC,qBAAqB;;;;kBAIpC,IAAI,CAAC,IAAI,GAAG,CAAC;kBACb,IAAI,CAAC,IAAI,GAAG,CAAC;iBACd,MAAM;;4BAEK,IAAI,CAAC,qBAAqB;;gCAEtB,aAAa;iCACZ,MAAM;;;;6BAIV,IAAI,CAAC,OAAO;KACpC,CAAC;IACJ,CAAC;IAED,cAAc,CAAC,OAAgB;QAC7B,OAAO,OAAO,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;IACzC,CAAC;IAEO,eAAe,CAAC,QAAgB;QACtC,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5C,CAAC;;AA5Fe,wBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;GAqB3B,AArBqB,CAqBpB;AAGF;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;mDACd;AAGb;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;+CAChB;AAGX;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;sDACX;AAGhB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;kDACH;AAGxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;kDACZ;AAGhB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gDACjB;AAxCC,iBAAiB;IAD7B,aAAa,CAAC,oBAAoB,CAAC;GACvB,iBAAiB,CA8F7B","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n@customElement('progress-component')\nexport class ProgressComponent extends LitElement {\n  static override styles = css`\n    :host {\n      display: flex;\n      flex-direction: row;\n      align-items: center;\n      border: solid 1px gray;\n      padding: 8px 10px;\n      max-width: 800px;\n      gap: 10px;\n    }\n    circle {\n      transition: stroke-dashoffset 0.35s;\n      transform: rotate(-90deg);\n      transform-origin: 50% 50%;\n    }\n    .message {\n      text-overflow: ellipsis;\n      overflow: hidden;\n      white-space: nowrap;\n      max-width: calc(100% - 20px); /* Adjusts the width dynamically */\n    }\n  `;\n\n  @property({ type: Number })\n  progress = 0;\n\n  @property({ type: Number })\n  size = 100;\n\n  @property({ type: Number })\n  strokeWidth = 0;\n\n  @property({ type: String })\n  message = 'Idle status';\n\n  @property({ type: Boolean })\n  success = false;\n\n  @property({ type: Number })\n  count = 0;\n\n  // Calculate the strokeWidth, defaulting to 1/2 of the size if not provided\n  get calculatedStrokeWidth() {\n    const defaultStrokeWidth = this.size / 2; // Changed to 1/2 of the size\n    return this.strokeWidth > 0\n      ? Math.min(this.strokeWidth, defaultStrokeWidth)\n      : defaultStrokeWidth;\n  }\n\n  override render() {\n    const radius = (this.size / 2) - (this.calculatedStrokeWidth / 2); // Account for stroke width in the radius calculation\n    const circumference = 2 * Math.PI * radius;\n    const progress = this.displayProgress(this.progress);\n    const offset = circumference * (1 - progress);\n\n    return html`\n      <div>\n        <svg\n          width=\"${this.size}px\"\n          height=\"${this.size}px\"\n          viewBox=\"0 0 ${this.size} ${this.size}\"\n        >\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#b9b9b9\"\n            stroke-width=\"${this.calculatedStrokeWidth}\"\n            fill=\"transparent\"\n          ></circle>\n          <circle\n            cx=\"${this.size / 2}\"\n            cy=\"${this.size / 2}\"\n            r=\"${radius}\"\n            stroke=\"#3f3f3f\"\n            stroke-width=\"${this.calculatedStrokeWidth}\"\n            fill=\"transparent\"\n            stroke-dasharray=\"${circumference}\"\n            stroke-dashoffset=\"${offset}\"\n          ></circle>\n        </svg>\n      </div>\n      <div class='message'>${this.message}</div>\n    `;\n  }\n\n  displaySuccess(success: boolean) {\n    return success ? 'Success' : 'Failure';\n  }\n\n  private displayProgress(progress: number): number {\n    return Math.min(Math.max(progress, 0), 1);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    'progress-component': ProgressComponent;\n  }\n}\n"]}